@page "/"
@inject Services.TranscriptionService TranscriptionService
@inject Services.AudioService AudioService
@using MudBlazor

<PageTitle>Audio</PageTitle>
<MudText Typo="Typo.h3" Class="mb-3">Live Transcript</MudText>
<MudCard>
    <MudCardContent Style="display: flex; flex-direction: column-reverse; height: 300px; overflow-y: scroll;">
        <MudText Typo="Typo.h4">@(string.Join(' ', transcriptions))</MudText>
    </MudCardContent>
    <MudCardActions>
        @if (isTranscribing)
        {
            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Adjust" Color="Color.Success"
                OnClick="@(transcriptionCTS.Cancel)">Transcribing...</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Adjust" Color="Color.Error"
                OnClick="@(async () => await StartTranscription())">Not transcribing</MudButton>
        }

        @if (isRecording)
        {
            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Mic" Color="Color.Warning"
                OnClick="@(recordingCTS.Cancel)">Recording...</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Mic" Color="Color.Error"
                OnClick="@(async () => await StartRecording())">Not recording</MudButton>
        }
    </MudCardActions>
</MudCard>



@code {
    private List<string> transcriptions = new List<string> { "" };
    private CancellationTokenSource transcriptionCTS = new();
    private CancellationTokenSource recordingCTS = new();
    private bool isTranscribing = false;
    private bool isRecording = false;

    private async Task StartTranscription()
    {
        transcriptionCTS.Cancel();
        isTranscribing = true;

        transcriptionCTS = new CancellationTokenSource();
        transcriptionCTS.Token.Register(() => {
            isTranscribing = false; StateHasChanged();
        });

        await TranscriptionService.ReceiveTextStreamAsync(
        OnTranscriptionReceived, transcriptionCTS.Cancel,
        transcriptionCTS.Token);
        StateHasChanged();
    }

    public async Task StartRecording()
    {
        recordingCTS.Cancel();
        isRecording = true;

        recordingCTS = new CancellationTokenSource();
        recordingCTS.Token.Register(() => {
            isRecording = false; StateHasChanged();
        });

        await AudioService.StartAudioStreamingAsync(recordingCTS.Cancel,
        recordingCTS.Token);
        StateHasChanged();
    }

    private void OnTranscriptionReceived(string text)
    {
        // check if a new phrase is starting
        if (string.IsNullOrWhiteSpace(text) && !string.IsNullOrWhiteSpace(transcriptions[^1]))
        {
            transcriptions.Add(""); // Cycle to a new line
            if (transcriptions.Count > 1000) transcriptions.RemoveAt(0);
            return; // Skip adding the empty line
        }
        // update last line with new text
        transcriptions[^1] = text;
        StateHasChanged();
    }
}
