@page "/instructor"
@inject Services.TranscriptionService TranscriptionService
@inject Services.AudioService AudioService
@inject Services.ControlService ControlService
@inject Services.ConfigurationService ConfigurationService
@inject ISnackbar Snackbar
@using MudBlazor

<PageTitle>Instructor</PageTitle>

<MudStack Class="d-flex flex-wrap" Row="true" AlignItems="AlignItems.Start">
    <div class="d-flex flex-column flex-grow-1 align-start">
        <MudText Typo="Typo.h3" Class="mb-3">Live Transcript</MudText>
        <MudCard Style="width: 100%">
            <MudCardContent Style="display: flex; flex-direction: column-reverse; height: 300px; overflow-y: scroll;">
                <MudText Typo="Typo.h4">@(string.Join(' ', transcriptions))</MudText>
            </MudCardContent>
            <MudCardActions Class="d-flex flex-wrap">
                @if (isTranscribing)
                {
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Adjust" Color="Color.Success"
                        OnClick="@(transcriptionCTS.Cancel)">Transcribing</MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Adjust" Color="Color.Error"
                        OnClick="@(async () => await StartTranscription())">Not transcribing</MudButton>
                }

                @if (isRecording)
                {
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Mic" Color="Color.Warning"
                        OnClick="@(recordingCTS.Cancel)">Recording</MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Mic" Color="Color.Error"
                        OnClick="@(async () => await StartRecording())">Not recording</MudButton>
                }
            </MudCardActions>
        </MudCard>
    </div>

    @* controller *@
    <div class="d-flex flex-column align-end">
        <MudText Typo="Typo.h3" Class="mb-3">Controller</MudText>
        <div class="d-flex">
            <div class="d-flex flex-column align-center justify-space-between" style="height: 175px;">
                <MudFab StartIcon="@Icons.Material.Filled.ArrowDropUp" aria-label="Forward" Size="Size.Large"
                    @onpointerdown="@(async () => await ForwardDown())" @onpointerout="@(async () => await ForwardUp())"
                    @onpointerup="@(async () => await ForwardUp())" />

                <div class="d-flex justify-space-between" style="width: 175px;">
                    <MudFab StartIcon="@Icons.Material.Filled.ArrowLeft" aria-label="Left" Size="Size.Large"
                        @onpointerdown="@(async () => await LeftDown())" @onpointerout="@(async () => await LeftUp())"
                        @onpointerup="@(async () => await LeftUp())" />

                    <MudFab StartIcon="@Icons.Material.Filled.ArrowRight" aria-label="Right" Size="Size.Large"
                        @onpointerdown="@(async () => await RightDown())" @onpointerout="@(async () => await RightUp())"
                        @onpointerup="@(async () => await RightUp())" />
                </div>

                <MudFab StartIcon="@Icons.Material.Filled.ArrowDropDown" aria-label="Backward" Size="Size.Large"
                    @onpointerdown="@(async () => await BackwardDown())"
                    @onpointerout="@(async () => await BackwardUp())"
                    @onpointerup="@(async () => await BackwardUp())" />
            </div>
        </div>

        <MudFab StartIcon="@Icons.Material.Filled.SurroundSound" aria-label="Right" Size="Size.Large"
            @onpointerdown="@(async () => await SirenOn())" @onpointerout="@(async () => await SirenOff())"
            @onpointerup="@(async () => await SirenOff())" />
    </div>
</MudStack>



@code {
    private List<string> transcriptions = new List<string> { "" };
    private CancellationTokenSource transcriptionCTS = new();
    private CancellationTokenSource recordingCTS = new();
    private bool isTranscribing = false;
    private bool isRecording = false;

    protected override async Task OnInitializedAsync()
    {
        // verify api key exists if whisper is selected
        var config = await ConfigurationService.GetConfigAsync();
        if (config.TranscriptionEngine == "whisper" && string.IsNullOrWhiteSpace(config.OpenaiApiKey))
        {
            Snackbar.Add("OpenAI API key is required for Whisper transcription engine.", Severity.Error);
        }
        await StartTranscription();
    }

    private async Task StartTranscription()
    {
        transcriptionCTS.Cancel();
        isTranscribing = true;

        transcriptionCTS = new CancellationTokenSource();
        transcriptionCTS.Token.Register(() =>
        {
            isTranscribing = false; StateHasChanged();
        });

        await TranscriptionService.ReceiveTextStreamAsync(
        OnTranscriptionReceived, transcriptionCTS.Cancel,
        transcriptionCTS.Token);
        StateHasChanged();
    }

    public async Task StartRecording()
    {
        recordingCTS.Cancel();
        isRecording = true;

        recordingCTS = new CancellationTokenSource();
        recordingCTS.Token.Register(() =>
        {
            isRecording = false; StateHasChanged();
        });

        await AudioService.StartAudioStreamingAsync(recordingCTS.Cancel,
        recordingCTS.Token);
        StateHasChanged();
    }

    private void OnTranscriptionReceived(string text)
    {
        // check if a new phrase is starting
        if (string.IsNullOrWhiteSpace(text) && !string.IsNullOrWhiteSpace(transcriptions[^1]))
        {
            transcriptions.Add(""); // Cycle to a new line
            if (transcriptions.Count > 1000) transcriptions.RemoveAt(0);
            return; // Skip adding the empty line
        }
        // update last line with new text
        transcriptions[^1] = text;
        StateHasChanged();
    }

    private async Task ForwardDown()
    {
        await ControlService.DriveForwardAsync();
    }

    private async Task ForwardUp()
    {
        await ControlService.StopForwardAsync();

    }

    private async Task BackwardDown()
    {
        await ControlService.DriveBackwardAsync();
    }

    private async Task BackwardUp()
    {
        await ControlService.StopBackwardAsync();
    }

    private async Task LeftDown()
    {
        await ControlService.TurnLeftAsync();
    }

    private async Task LeftUp()
    {
        await ControlService.StopLeftAsync();
    }

    private async Task RightDown()
    {
        await ControlService.TurnRightAsync();
    }

    private async Task RightUp()
    {
        await ControlService.StopRightAsync();
    }

    private async Task SirenOn()
    {
        await ControlService.OnSirenAsync();
    }

    private async Task SirenOff()
    {
        await ControlService.OffSirenAsync();
    }
}
